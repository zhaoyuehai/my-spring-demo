{"version":3,"sources":["serviceWorker.js","utils/APIHelper.js","components/LoginForm.js","components/RegisterForm.js","utils/ConstantUtil.js","components/Record.js","components/AddRecordForm.js","components/Records.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","baseUrl","localStorage","getItem","axios","defaults","baseURL","interceptors","request","use","config","headers","common","error","Promise","reject","response","status","removeItem","reload","registerUser","body","post","Authorization","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","userName","password","event","obj","target","name","value","setState","handleRegister","username","_this2","preventDefault","qs","stringify","Base64","encode","Content-type","then","data","code","handleLogin","alert","message","catch","react_default","a","createElement","id","onSubmit","handleSubmit","bind","type","className","onChange","handleChange","placeholder","disabled","valid","onClick","Component","RegisterForm","phone","APIHelper","setItem","getRole","roleName","Record","edit","record","refs","email","nickName","put","handleEditRecord","_this3","delete","concat","handleDeleteRecord","key","ConstantUtil","handleToggle","handleDelete","defaultValue","ref","handleEdit","recordForm","recordRow","AddRecordForm","handleNewRecord","Records","isLoaded","pageNum","pageSize","get","toConsumableArray","newRecord","recordIndex","indexOf","newData","map","item","index","objectSpread","filter","recordsComponent","_this$state","components_Record","updateRecord","deleteRecord","AddRecordForm_AddRecordForm","addRecord","App","pageType","isLogin","isSetIP","user","accessToken","mainType","loginType","url","signOut","handleToggleSetting","length","startsWith","appComponent","topUserComponent","topSetComponet","LoginForm_LoginForm","login","registerType","RegisterForm_RegisterForm","src_components_Records","handleSetBaseURL","validBaseUrl","style","height","padding","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ba5173f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\nimport Base64 from 'base-64';\r\nimport qs from 'qs';//使用qs将axios发送的数据格式转换为form-data格式（在安装axios时，默认就安装了）\r\n\r\nexport var baseUrl = localStorage.getItem('BaseURL') || 'http://localhost';\r\n\r\nexport const setBaseURL = (url) => {\r\n  baseUrl = url;\r\n  localStorage.setItem('BaseURL', baseUrl);\r\n  axios.defaults.baseURL = baseUrl;\r\n}\r\n\r\naxios.defaults.baseURL = baseUrl;\r\n\r\n//请求拦截器\r\naxios.interceptors.request.use(\r\n  config => {\r\n    config.headers.common['Authorization'] = localStorage.getItem('Authorization');\r\n    return config;\r\n  },\r\n  error => {// 对请求错误做些什么\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n//响应拦截器\r\naxios.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem('Authorization');\r\n        localStorage.removeItem('UserName');\r\n        localStorage.removeItem('RoleName');\r\n        window.location.reload();\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const login = (username, password) =>\r\n  axios.post(`api/v1/login`,\r\n    qs.stringify({ username: username, password: Base64.encode(password) }), //password->Base64进行编码\r\n    { headers: { 'Content-type': 'application/x-www-form-urlencoded', 'Authorization': null } }\r\n  )\r\n\r\nexport const getAllUser = (pageNum, pageSize) =>\r\n  axios.get(`api/v1/users?pageNum=${pageNum}&pageSize=${pageSize}`)\r\n\r\n\r\nexport const registerUser = (body) =>\r\n  axios.post(`api/v1/user`, body, { headers: { 'Authorization': null } })\r\n\r\nexport const updateUser = (body) =>\r\n  axios.put(`api/v1/user`, body)\r\n\r\nexport const deleteUser = (id) =>\r\n  axios.delete(`api/v1/user/${id}`)\r\n\r\n// var url = 'http://localhost/api/v1/users?pageNum=1&pageSize=20';\r\n// import $ from 'jquery';\r\n// jQuery请求\r\n        // $.getJSON(RecordsApI.api + '/api/v1/users',\r\n        //     {\r\n        //         pageNum: 1,\r\n        //         pageSize: 20\r\n        //     })\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             data: response.data,\r\n        //             isLoaded: true\r\n        //         }),\r\n        //         error => {\r\n        //             this.setState({\r\n        //                 isLoaded: true,\r\n        //                 error\r\n        //             })\r\n        //         }\r\n        //     )\r\n\r\n        // $.getJSON(url)\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             data: response.data,\r\n        //             isLoaded: true\r\n        //         }),\r\n        //         error => {\r\n        //             this.setState({\r\n        //                 isLoaded: true,\r\n        //                 error\r\n        //             })\r\n        //         }\r\n        //     )\r\n\r\n        // fetch请求\r\n        // fetch(url, {\r\n        //     method: 'GET',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json;charset=UTF-8'\r\n        //     },\r\n        //     mode: 'cors',\r\n        //     cache: 'default'\r\n        // })\r\n        //     .then(res => res.json())\r\n        //     .then((data) => {\r\n        //         console.log(data)\r\n        //     })\r\n\r\n\r\n// let token = '';\r\n// axios.defaults.headers.common['token'] = token;\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json;chartset=UTF-8';\r\n// axios.interceptors.request.use(function (config) {\r\n//   let user = JSON.parse(window.sessionStorage.getItem('AuthorizationData'));\r\n//   if (user) {\r\n//     token = user.token;\r\n//   }\r\n//   config.headers.common['token']\r\n// });\r\n","import React, { Component } from 'react';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport './LoginForm.scss';\r\n/**\r\n * 登录\r\n */\r\nexport default class LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            userName: localStorage.getItem('UserName') || \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        let name;//定义局部变量\r\n        name = event.target.name;//name的值就算input name的值\r\n        let obj;//定义局部变量\r\n        //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n        obj = {};\r\n        obj[\"\" + name] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n\r\n    valid() {\r\n        return !this.state.isLoading && this.state.userName && this.state.password;\r\n    }\r\n\r\n    handleRegister() {\r\n        this.props.handleRegister();\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        APIHelper\r\n            .login(this.state.userName, this.state.password)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === '10000') {\r\n                        this.setState({\r\n                            isLoading: false\r\n                        });\r\n                        this.props.handleLogin(response.data.data);\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        this.setState({\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    alert(error.message);\r\n                    this.setState({\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"loginForm\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <div>\r\n                    <input type=\"text\" className=\"form-control mb-2\" onChange={this.handleChange.bind(this)} placeholder=\"用户名/手机号\" name=\"userName\" value={this.state.userName} />\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" className=\"form-control mb-2\" onChange={this.handleChange.bind(this)} placeholder=\"密码\" name=\"password\" value={this.state.password} />\r\n                </div>\r\n                <button id=\"loginButton\" type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>登录</button>\r\n                <div className=\"loginBottom\">\r\n                    <span id=\"register\" onClick={this.handleRegister.bind(this)}>注册</span>\r\n                    <span id=\"findPwd\">忘记密码？</span>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Base64 from 'base-64';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport './RegisterForm.scss'\r\n/**\r\n * 注册用户表单\r\n */\r\nexport default class RegisterForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            userName: \"\",\r\n            password: \"\",\r\n            phone: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        let name;//定义局部变量\r\n        name = event.target.name;//name的值就算input name的值\r\n        let obj;//定义局部变量\r\n        //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n        obj = {};\r\n        obj[\"\" + name] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n\r\n    valid() {\r\n        return !this.state.isLoading && this.state.userName && this.state.password && this.state.phone;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        const data = {\r\n            userName: this.state.userName,\r\n            password: Base64.encode(this.state.password),//password->Base64进行编码\r\n            phone: this.state.phone\r\n        };\r\n        APIHelper.registerUser(data).then(\r\n            response => {\r\n                if (response.data.code === '10000') {\r\n                    localStorage.setItem('UserName', this.state.userName);\r\n                    this.props.handleLogin();\r\n                } else {\r\n                    alert(response.data.message);\r\n                    this.setState({ isLoading: false });\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                alert(error.message);\r\n                this.setState({ isLoading: false });\r\n            }\r\n        );\r\n    }\r\n    handleLogin() {\r\n        this.props.handleLogin();\r\n    }\r\n    render() {\r\n        return (\r\n            <form id=\"registerForm\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"用户名\" name=\"userName\" value={this.state.userName} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"password\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"密码\" name=\"password\" value={this.state.password} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"手机号\" name=\"phone\" value={this.state.phone} />\r\n                </div>\r\n                <button type=\"submit\" className=\"registerButton btn btn-primary\" disabled={!this.valid()}>注册</button>\r\n                <div className=\"registerBottom\">\r\n                    已有账号？<span id=\"returnLogin\" onClick={this.handleLogin.bind(this)}>登录</span>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}","export const defaultRole = \"ROLE_GUEST\";\r\n\r\nexport const getRole = (roleName) => {\r\n    switch (roleName) {\r\n        case \"ROLE_ADMIN\":\r\n            return \"管理员\";\r\n        case \"ROLE_GUEST\":\r\n            return \"游客\";\r\n        case \"ROLE_USER\":\r\n            return \"普通会员\";\r\n        case \"ROLE_VIP\":\r\n            return \"尊享会员\";\r\n        default:\r\n            return \"未知\";\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport * as ConstantUtil from '../utils/ConstantUtil'\r\n/**\r\n * 单条用户表格数据，支持编辑操作\r\n */\r\nclass Record extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            edit: false\r\n        };\r\n    }\r\n\r\n    handleToggle() {\r\n        this.setState({\r\n            edit: !this.state.edit\r\n        })\r\n    }\r\n    handleEdit(event) {\r\n        event.preventDefault();\r\n        const record = {\r\n            id: this.props.record.id,\r\n            userName: this.props.record.userName,\r\n            phone: this.refs.phone.value,\r\n            email: this.refs.email.value,\r\n            nickName: this.refs.nickName.value\r\n        }\r\n        APIHelper\r\n            .updateUser(record)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === \"10000\") {\r\n                        this.setState({ edit: false })\r\n                        this.props.handleEditRecord(this.props.record, record)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    handleDelete(event) {\r\n        APIHelper\r\n            .deleteUser(this.props.record.id)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === \"10000\") {\r\n                        this.props.handleDeleteRecord(this.props.record.id)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    recordRow() {\r\n        return (\r\n            <tr key={this.props.record.id}>\r\n                <td>{this.props.record.userName}</td>\r\n                <td>{this.props.record.phone}</td>\r\n                <td>{this.props.record.email}</td>\r\n                <td>{this.props.record.nickName}</td>\r\n                <td>{ConstantUtil.getRole(this.props.record.roleName)}</td>\r\n                <td>\r\n                    <button className=\"btn btn-info mr-2\" onClick={this.handleToggle.bind(this)}>编辑</button>\r\n                    <button className=\"btn btn-danger\" onClick={this.handleDelete.bind(this)}>删除</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    recordForm() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.record.userName}</td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.phone} ref=\"phone\"></input></td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.email} ref=\"email\"></input></td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.nickName} ref=\"nickName\"></input></td>\r\n                <td>{ConstantUtil.getRole(this.props.record.roleName)}</td>\r\n                <td>\r\n                    <button className=\"btn btn-info mr-2\" onClick={this.handleEdit.bind(this)}>更新</button>\r\n                    <button className=\"btn btn-danger\" onClick={this.handleToggle.bind(this)}>取消</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.edit) {\r\n            return this.recordForm();\r\n        } else {\r\n            return this.recordRow();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Record;","import React, { Component } from 'react';\r\nimport Base64 from 'base-64';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport * as ConstantUtils from '../utils/ConstantUtil';\r\nimport './AddRecordForm.scss'\r\n/**\r\n * 注册用户表单\r\n */\r\nexport default class AddRecordForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            userName: \"\",\r\n            password: \"\",\r\n            phone: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        let name;//定义局部变量\r\n        name = event.target.name;//name的值就算input name的值\r\n        let obj;//定义局部变量\r\n        //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n        obj = {};\r\n        obj[\"\" + name] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n\r\n    valid() {\r\n        return !this.state.isLoading && this.state.userName && this.state.password && this.state.phone;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        const data = {\r\n            id: null,\r\n            userName: this.state.userName,\r\n            password: Base64.encode(this.state.password),//password->Base64进行编码\r\n            phone: this.state.phone\r\n        };\r\n        APIHelper.registerUser(data).then(\r\n            response => {\r\n                if (response.data.code === '10000') {\r\n                    data.id = response.data.data;\r\n                    data.roleName = ConstantUtils.defaultRole;\r\n                    this.props.handleNewRecord(data);\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        userName: \"\",\r\n                        password: \"\",\r\n                        phone: \"\"\r\n                    });\r\n                } else {\r\n                    alert(response.data.message);\r\n                    this.setState({ isLoading: false });\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                alert(error.message);\r\n                this.setState({ isLoading: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-inline mt-3 mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"用户名\" name=\"userName\" value={this.state.userName} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"password\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"密码\" name=\"password\" value={this.state.password} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"手机号\" name=\"phone\" value={this.state.phone} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>注册</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Record from './Record';\r\nimport AddRecordForm from './AddRecordForm';\r\nimport * as APIHelper from '../utils/APIHelper'\r\nimport './Records.scss';\r\n/**\r\n * 用户列表\r\n */\r\nclass Records extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            code: null,\r\n            message: null,\r\n            data: []\r\n        }\r\n    }\r\n    // 组件生命周期： 组件渲染后调用\r\n    componentDidMount() {\r\n        APIHelper\r\n            .getAllUser(1, 20)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        code: response.data.code,\r\n                        message: response.data.message,\r\n                        data: response.data.data,\r\n                        isLoaded: true\r\n                    })\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error: error\r\n                    })\r\n                }\r\n            );\r\n    }\r\n\r\n    addRecord(record) {\r\n        if (this.state.code === 10000) {\r\n            this.setState({\r\n                error: null,\r\n                isLoaded: true,\r\n                code: \"10000\",\r\n                message: \"success\",\r\n                data: [\r\n                    ...this.state.data,\r\n                    record\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    updateRecord(record, newRecord) {\r\n        const recordIndex = this.state.data.indexOf(record);\r\n        const newData = this.state.data.map((item, index) => {\r\n            if (index !== recordIndex) {\r\n                return item;\r\n            }\r\n            return {\r\n                ...item,\r\n                ...newRecord\r\n            };\r\n        });\r\n        this.setState({\r\n            data: newData\r\n        });\r\n    }\r\n\r\n    deleteRecord(id) {\r\n        const newData = this.state.data.filter((item) => item.id !== id);\r\n        this.setState({\r\n            data: newData\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, code, message, data } = this.state;\r\n        let recordsComponent;\r\n        if (error) {\r\n            recordsComponent = <div>Error:{error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            recordsComponent = <div>Loading...</div>;\r\n        } else if (code === '10000') {\r\n            recordsComponent = <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>用户名</th>\r\n                        <th>手机号</th>\r\n                        <th>邮箱</th>\r\n                        <th>昵称</th>\r\n                        <th>角色</th>\r\n                        <th>操作</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map((record) =>\r\n                        <Record key={record.id} record={record}\r\n                            handleEditRecord={this.updateRecord.bind(this)}\r\n                            handleDeleteRecord={this.deleteRecord.bind(this)} />\r\n                    )\r\n                    }\r\n                </tbody>\r\n            </table>;\r\n        } else {\r\n            recordsComponent = <div>加载失败：{message}</div>;\r\n        }\r\n        return (\r\n            <div>\r\n                <h4>新增用户</h4>\r\n                <AddRecordForm handleNewRecord={this.addRecord.bind(this)} />\r\n                <h4>用户列表</h4>\r\n                {recordsComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Records;","import React, { Component } from 'react';\r\nimport LoginForm from './components/LoginForm';\r\nimport RegisterForm from './components/RegisterForm';\r\nimport Records from './components/Records';\r\nimport './App.scss';\r\nimport * as ConstantUtil from './utils/ConstantUtil';\r\nimport * as APIHelper from './utils/APIHelper';\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pageType: this.isLogin() ? 0 : 1, //0:主页 1：登录 2：注册 3：找回密码 \r\n      isSetIP: false,\r\n      baseUrl: APIHelper.baseUrl\r\n    }\r\n  }\r\n\r\n  isLogin() {\r\n    return localStorage.getItem('Authorization') != null;\r\n  }\r\n\r\n  login(user) {\r\n    localStorage.setItem('Authorization', 'Bearer ' + user.accessToken);\r\n    localStorage.setItem('UserName', user.userName);\r\n    localStorage.setItem('RoleName', ConstantUtil.getRole(user.roleName));\r\n    this.mainType();\r\n  }\r\n\r\n  signOut() {\r\n    localStorage.removeItem('Authorization');\r\n    localStorage.removeItem('UserName');\r\n    localStorage.removeItem('RoleName');\r\n    this.loginType();\r\n  }\r\n\r\n  mainType() {\r\n    this.setState({\r\n      pageType: 0\r\n    });\r\n  }\r\n\r\n  loginType() {\r\n    this.setState({\r\n      pageType: 1\r\n    });\r\n  }\r\n\r\n  registerType() {\r\n    this.setState({\r\n      pageType: 2\r\n    });\r\n  }\r\n\r\n  findPwdType() {\r\n    this.setState({\r\n      pageType: 3\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    let name;//定义局部变量\r\n    name = event.target.name;//name的值就算input name的值\r\n    let obj;//定义局部变量\r\n    //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n    obj = {};\r\n    obj[\"\" + name] = event.target.value;\r\n    this.setState(obj);\r\n  }\r\n\r\n  handleToggleSetting() {\r\n    this.setState({\r\n      isSetIP: !this.state.isSetIP\r\n    });\r\n  }\r\n\r\n  handleSetBaseURL() {\r\n    APIHelper.setBaseURL(this.state.baseUrl);\r\n    if (this.state.pageType === 0) {\r\n      this.signOut();\r\n    }\r\n    this.handleToggleSetting();\r\n  }\r\n\r\n  validBaseUrl() {\r\n    return this.state.baseUrl.length > 9 && (this.state.baseUrl.startsWith(\"http://\") || this.state.baseUrl.startsWith(\"https://\"));\r\n  }\r\n\r\n  render() {\r\n    let appComponent;\r\n    switch (this.state.pageType) {//0:  2： 3：找回密码 \r\n      case 1://登录\r\n        appComponent = <div>\r\n          <LoginForm handleLogin={this.login.bind(this)} handleRegister={this.registerType.bind(this)} />\r\n        </div>;\r\n        break;\r\n      case 2://注册\r\n        appComponent = <div>\r\n          <RegisterForm handleRegister={this.registerType.bind(this)} handleLogin={this.loginType.bind(this)} />\r\n        </div>;\r\n        break;\r\n      default://主页\r\n        appComponent = <div>\r\n          <Records />\r\n        </div>;\r\n        break;\r\n    }\r\n    let topUserComponent;\r\n    if (this.isLogin()) {\r\n      topUserComponent = <h6>\r\n        <span id=\"roleName\"> {localStorage.getItem('RoleName')} </span>\r\n        hello,{localStorage.getItem('UserName')}!\r\n      <button className=\"btn btn-danger ml-2\" onClick={this.signOut.bind(this)}> 退出登录</button>\r\n      </h6>;\r\n    } else {\r\n      topUserComponent = \"\";\r\n    }\r\n\r\n    let topSetComponet;\r\n    if (this.state.isSetIP) {\r\n      topSetComponet = <span>\r\n        输入服务器地址：<input type=\"text\" className=\"mr-2\" onChange={this.handleChange.bind(this)} name=\"baseUrl\" value={this.state.baseUrl} />\r\n        <button className=\"btn btn-info mr-2\" onClick={this.handleSetBaseURL.bind(this)} disabled={!this.validBaseUrl()}>确定</button>\r\n        <button className=\"btn btn-danger\" onClick={this.handleToggleSetting.bind(this)}>取消</button>\r\n      </span>\r\n    } else {\r\n      topSetComponet = <h6>\r\n        当前服务器地址：{this.state.baseUrl}\r\n        <button className=\"btn btn-info ml-2 mr-2\" onClick={this.handleToggleSetting.bind(this)}> 设置</button>\r\n      </h6>\r\n    }\r\n\r\n    return (<div>\r\n      <div style={{ height: \"40px\", padding: \"10px\" }}>\r\n        <div className=\"floatL\">\r\n          {topSetComponet}\r\n        </div>\r\n        <div className=\"floatR\">\r\n          {topUserComponent}\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      {appComponent}\r\n    </div >)\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}