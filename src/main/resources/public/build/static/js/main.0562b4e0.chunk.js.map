{"version":3,"sources":["serviceWorker.js","utils/APIHelper.js","components/LoginForm.js","utils/ConstantUtil.jsx","components/Record.js","components/RegisterForm.js","components/Records.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","api","process","REACT_APP_RECPRDS_API_URL","axios","interceptors","request","use","config","headers","common","localStorage","getItem","error","Promise","reject","response","status","removeItem","reload","RecordForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","userName","password","event","obj","target","name","value","setState","username","_this2","preventDefault","post","concat","qs","stringify","Base64","encode","Content-type","Authorization","then","data","code","handleLogin","alert","message","catch","react_default","a","createElement","id","onSubmit","handleSubmit","bind","type","className","onChange","handleChange","placeholder","disabled","valid","Component","getRole","roleName","Record","edit","body","record","phone","refs","email","nickName","put","handleEditRecord","_this3","delete","handleDeleteRecord","key","ConstantUtil","onClick","handleToggle","handleDelete","defaultValue","ref","handleEdit","recordForm","recordRow","RegisterForm","handleNewRecord","Records","isLoaded","pageNum","pageSize","get","toConsumableArray","newRecord","recordIndex","indexOf","newData","map","item","index","objectSpread","filter","handleSignOut","recordsComponent","_this$state","components_Record","updateRecord","deleteRecord","style","textAlign","color","RegisterForm_RegisterForm","addRecord","App","isLogin","user","setItem","accessToken","components_Records","signOut","LoginForm_RecordForm","login","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0562b4e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\nimport Base64 from 'base-64';\r\nimport qs from 'qs';//使用qs将axios发送的数据格式转换为form-data格式（在安装axios时，默认就安装了）\r\n\r\nconst api = process.env.REACT_APP_RECPRDS_API_URL || 'http://localhost';\r\n\r\n//请求拦截器\r\naxios.interceptors.request.use(\r\n  config => {\r\n    config.headers.common['Authorization'] = localStorage.getItem('Authorization');\r\n    return config;\r\n  },\r\n  error => {// 对请求错误做些什么\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n//响应拦截器\r\naxios.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem('Authorization');\r\n        localStorage.removeItem('UserName');\r\n        localStorage.removeItem('RoleName');\r\n        window.location.reload();\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const login = (username, password) =>\r\n  axios.post(`${api}/api/v1/login`,\r\n    qs.stringify({ username: username, password: Base64.encode(password) }), //password->Base64进行编码\r\n    { headers: { 'Content-type': 'application/x-www-form-urlencoded', 'Authorization': null } }\r\n  )\r\n\r\nexport const getAllUser = (pageNum, pageSize) =>\r\n  axios.get(`${api}/api/v1/users?pageNum=${pageNum}&pageSize=${pageSize}`)\r\n\r\n\r\nexport const registerUser = (body) =>\r\n  axios.post(`${api}/api/v1/user`, body, { headers: { 'Authorization': null } })\r\n\r\nexport const updateUser = (body) =>\r\n  axios.put(`${api}/api/v1/user`, body)\r\n\r\nexport const deleteUser = (id) =>\r\n  axios.delete(`${api}/api/v1/user/${id}`)\r\n\r\n// var url = 'http://localhost/api/v1/users?pageNum=1&pageSize=20';\r\n// import $ from 'jquery';\r\n// jQuery请求\r\n        // $.getJSON(RecordsApI.api + '/api/v1/users',\r\n        //     {\r\n        //         pageNum: 1,\r\n        //         pageSize: 20\r\n        //     })\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             data: response.data,\r\n        //             isLoaded: true\r\n        //         }),\r\n        //         error => {\r\n        //             this.setState({\r\n        //                 isLoaded: true,\r\n        //                 error\r\n        //             })\r\n        //         }\r\n        //     )\r\n\r\n        // $.getJSON(url)\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             data: response.data,\r\n        //             isLoaded: true\r\n        //         }),\r\n        //         error => {\r\n        //             this.setState({\r\n        //                 isLoaded: true,\r\n        //                 error\r\n        //             })\r\n        //         }\r\n        //     )\r\n\r\n        // fetch请求\r\n        // fetch(url, {\r\n        //     method: 'GET',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json;charset=UTF-8'\r\n        //     },\r\n        //     mode: 'cors',\r\n        //     cache: 'default'\r\n        // })\r\n        //     .then(res => res.json())\r\n        //     .then((data) => {\r\n        //         console.log(data)\r\n        //     })\r\n\r\n\r\n// let token = '';\r\n// axios.defaults.headers.common['token'] = token;\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json;chartset=UTF-8';\r\n// axios.interceptors.request.use(function (config) {\r\n//   let user = JSON.parse(window.sessionStorage.getItem('AuthorizationData'));\r\n//   if (user) {\r\n//     token = user.token;\r\n//   }\r\n//   config.headers.common['token']\r\n// });\r\n","import React, { Component } from 'react';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport './LoginForm.scss';\r\n/**\r\n * 登录\r\n */\r\nexport default class RecordForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            userName: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        let name;//定义局部变量\r\n        name = event.target.name;//name的值就算input name的值\r\n        let obj;//定义局部变量\r\n        //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n        obj = {};\r\n        obj[\"\" + name] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n\r\n    valid() {\r\n        return !this.state.isLoading && this.state.userName && this.state.password;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        APIHelper\r\n            .login(this.state.userName, this.state.password)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === '10000') {\r\n                        this.setState({\r\n                            isLoading: false\r\n                        });\r\n                        this.props.handleLogin(response.data.data);\r\n                    } else {\r\n                        alert(response.data.message);\r\n                        this.setState({\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    alert(error.message);\r\n                    this.setState({\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"LoginForm\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <div>\r\n                    <input type=\"text\" className=\"form-control mb-2\" onChange={this.handleChange.bind(this)} placeholder=\"用户名/手机号\" name=\"userName\" value={this.state.userName} />\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" className=\"form-control mb-2\" onChange={this.handleChange.bind(this)} placeholder=\"密码\" name=\"password\" value={this.state.password} />\r\n                </div>\r\n                <button id=\"LoginButton\" type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>登录</button>\r\n            </form>\r\n        );\r\n    }\r\n}","export const defaultRole = \"ROLE_GUEST\";\r\n\r\nexport const getRole = (roleName) => {\r\n    switch (roleName) {\r\n        case \"ROLE_ADMIN\":\r\n            return \"管理员\";\r\n        case \"ROLE_GUEST\":\r\n            return \"游客\";\r\n        case \"ROLE_USER\":\r\n            return \"普通会员\";\r\n        case \"ROLE_VIP\":\r\n            return \"尊享会员\";\r\n        default:\r\n            return \"未知\";\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport * as ConstantUtil from '../utils/ConstantUtil'\r\n/**\r\n * 单条用户表格数据，支持编辑操作\r\n */\r\nclass Record extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            edit: false\r\n        };\r\n    }\r\n\r\n    handleToggle() {\r\n        this.setState({\r\n            edit: !this.state.edit\r\n        })\r\n    }\r\n    handleEdit(event) {\r\n        event.preventDefault();\r\n        const record = {\r\n            id: this.props.record.id,\r\n            userName: this.props.record.userName,\r\n            phone: this.refs.phone.value,\r\n            email: this.refs.email.value,\r\n            nickName: this.refs.nickName.value\r\n        }\r\n        APIHelper\r\n            .updateUser(record)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === \"10000\") {\r\n                        this.setState({ edit: false })\r\n                        this.props.handleEditRecord(this.props.record, record)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    handleDelete(event) {\r\n        APIHelper\r\n            .deleteUser(this.props.record.id)\r\n            .then(\r\n                response => {\r\n                    if (response.data.code === \"10000\") {\r\n                        this.props.handleDeleteRecord(this.props.record.id)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    recordRow() {\r\n        return (\r\n            <tr key={this.props.record.id}>\r\n                <td>{this.props.record.userName}</td>\r\n                <td>{this.props.record.phone}</td>\r\n                <td>{this.props.record.email}</td>\r\n                <td>{this.props.record.nickName}</td>\r\n                <td>{ConstantUtil.getRole(this.props.record.roleName)}</td>\r\n                <td>\r\n                    <button className=\"btn btn-info mr-2\" onClick={this.handleToggle.bind(this)}>编辑</button>\r\n                    <button className=\"btn btn-danger\" onClick={this.handleDelete.bind(this)}>删除</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    recordForm() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.record.userName}</td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.phone} ref=\"phone\"></input></td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.email} ref=\"email\"></input></td>\r\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.nickName} ref=\"nickName\"></input></td>\r\n                <td>{ConstantUtil.getRole(this.props.record.roleName)}</td>\r\n                <td>\r\n                    <button className=\"btn btn-info mr-2\" onClick={this.handleEdit.bind(this)}>更新</button>\r\n                    <button className=\"btn btn-danger\" onClick={this.handleToggle.bind(this)}>取消</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.edit) {\r\n            return this.recordForm();\r\n        } else {\r\n            return this.recordRow();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Record;","import React, { Component } from 'react';\r\nimport Base64 from 'base-64';\r\nimport * as APIHelper from '../utils/APIHelper';\r\nimport * as ConstantUtils from '../utils/ConstantUtil';\r\nimport './RegisterForm.scss'\r\n/**\r\n * 注册用户表单\r\n */\r\nexport default class RegisterForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            userName: \"\",\r\n            password: \"\",\r\n            phone: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        let name;//定义局部变量\r\n        name = event.target.name;//name的值就算input name的值\r\n        let obj;//定义局部变量\r\n        //this.setState((obj = {}, obj[\"\" + name] = event.target.value, obj));//以上内容等同于下面：\r\n        obj = {};\r\n        obj[\"\" + name] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n\r\n    valid() {\r\n        return !this.state.isLoading && this.state.userName && this.state.password && this.state.phone;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ isLoading: true });\r\n        const data = {\r\n            id: null,\r\n            userName: this.state.userName,\r\n            password: Base64.encode(this.state.password),//password->Base64进行编码\r\n            phone: this.state.phone,\r\n            roleName: ConstantUtils.defaultRole\r\n        };\r\n        APIHelper.registerUser(data).then(\r\n            response => {\r\n                if (response.data.code === '10000') {\r\n                    data.id = response.data.data;\r\n                    this.props.handleNewRecord(data);\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        userName: \"\",\r\n                        password: \"\",\r\n                        phone: \"\"\r\n                    });\r\n                } else {\r\n                    alert(response.data.message);\r\n                    this.setState({ isLoading: false });\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                alert(error.message);\r\n                this.setState({ isLoading: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-inline mt-3 mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"用户名\" name=\"userName\" value={this.state.userName} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"password\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"密码\" name=\"password\" value={this.state.password} />\r\n                </div>\r\n                <div className=\"form-group mr-2\">\r\n                    <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"手机号\" name=\"phone\" value={this.state.phone} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>注册</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Record from './Record';\r\nimport RegisterForm from './RegisterForm';\r\nimport * as APIHelper from '../utils/APIHelper'\r\n/**\r\n * 用户列表\r\n */\r\nclass Records extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            code: null,\r\n            message: null,\r\n            data: []\r\n        }\r\n    }\r\n    // 组件生命周期： 组件渲染后调用\r\n    componentDidMount() {\r\n        APIHelper\r\n            .getAllUser(1, 20)\r\n            .then(\r\n                response => {\r\n                    this.setState({\r\n                        code: response.data.code,\r\n                        message: response.data.message,\r\n                        data: response.data.data,\r\n                        isLoaded: true\r\n                    })\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error: error\r\n                    })\r\n                }\r\n            );\r\n    }\r\n\r\n    addRecord(record) {\r\n        this.setState({\r\n            error: null,\r\n            isLoaded: true,\r\n            code: \"10000\",\r\n            message: \"success\",\r\n            data: [\r\n                ...this.state.data,\r\n                record\r\n            ]\r\n        });\r\n    }\r\n\r\n    updateRecord(record, newRecord) {\r\n        const recordIndex = this.state.data.indexOf(record);\r\n        const newData = this.state.data.map((item, index) => {\r\n            if (index !== recordIndex) {\r\n                return item;\r\n            }\r\n            return {\r\n                ...item,\r\n                ...newRecord\r\n            };\r\n        });\r\n        this.setState({\r\n            data: newData\r\n        });\r\n    }\r\n\r\n    deleteRecord(id) {\r\n        const newData = this.state.data.filter((item) => item.id !== id);\r\n        this.setState({\r\n            data: newData\r\n        });\r\n    }\r\n\r\n    handleSignOut(event) {\r\n        event.preventDefault();\r\n        this.props.handleSignOut();\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, code, message, data } = this.state;\r\n        let recordsComponent;\r\n        if (error) {\r\n            recordsComponent = <div>Error:{error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            recordsComponent = <div>Loading...</div>;\r\n        } else if (code === '10000') {\r\n            recordsComponent = <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>用户名</th>\r\n                        <th>手机号</th>\r\n                        <th>邮箱</th>\r\n                        <th>昵称</th>\r\n                        <th>角色</th>\r\n                        <th>操作</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.map((record) =>\r\n                        <Record key={record.id} record={record}\r\n                            handleEditRecord={this.updateRecord.bind(this)}\r\n                            handleDeleteRecord={this.deleteRecord.bind(this)} />\r\n                    )\r\n                    }\r\n                </tbody>\r\n            </table>;\r\n        } else {\r\n            recordsComponent = <div>加载失败：{message}</div>;\r\n        }\r\n        return (\r\n            <div className=\"m-3\">\r\n                <h5 style={{ textAlign: 'right' }}><span style={{ color: 'orange' }}> {localStorage.getItem('RoleName')} </span>hello,{localStorage.getItem('UserName')}!  <span style={{ color: 'blue' }} onClick={this.handleSignOut.bind(this)}><u>退出</u></span></h5>\r\n                <h4>新增用户</h4>\r\n                <RegisterForm handleNewRecord={this.addRecord.bind(this)} />\r\n                <h4>用户列表</h4>\r\n                {recordsComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Records;","import React, { Component } from 'react';\r\nimport LoginForm from './components/LoginForm';\r\nimport Records from './components/Records';\r\nimport './App.scss';\r\nimport * as ConstantUtil from './utils/ConstantUtil'\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLogin: localStorage.getItem('Authorization') != null\r\n    }\r\n  } \r\n\r\n  login(user) {\r\n    localStorage.setItem('Authorization', 'Bearer ' + user.accessToken);\r\n    localStorage.setItem('UserName', user.userName);\r\n    localStorage.setItem('RoleName', ConstantUtil.getRole(user.roleName));\r\n    this.setState({\r\n      isLogin: true\r\n    })\r\n  }\r\n\r\n  signOut() {\r\n    localStorage.removeItem('Authorization');\r\n    localStorage.removeItem('UserName');\r\n    localStorage.removeItem('RoleName');\r\n    this.setState({\r\n      isLogin: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLogin) {\r\n      return (\r\n        <div>\r\n          <Records handleSignOut={this.signOut.bind(this)} />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <LoginForm handleLogin={this.login.bind(this)} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}