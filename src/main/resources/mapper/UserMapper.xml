<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yuehai.mapper.UserMapper">
    <resultMap id="UserResultMap" type="com.yuehai.entity.UserEntity">
        <result column="uid" property="id" jdbcType="BIGINT"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="role_name" property="roleName" jdbcType="VARCHAR"/>
    </resultMap>

    <!--返回用户信息（不含角色字段）-->
    <sql id="User_Column_1">
        select uid,
               user_name,
               password,
               email,
               nick_name,
               phone,
               avatar,
               status,
               create_time,
               update_time
        from tb_user</sql>

    <!--需要返回（含角色字段）-->
    <sql id="User_Column_2">
           select uid,
               user_name,
               password,
               email,
               nick_name,
               phone,
               avatar,
               status,
               create_time,
               update_time,
               role_name
        from tb_user u,
        tb_user_role u_r,
        tb_role r</sql>

    <insert id="insertUser" parameterType="com.yuehai.entity.UserEntity">
        <selectKey keyProperty="id" resultType="java.lang.Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into tb_user(user_name, password, phone, status)
        values (#{userName}, #{password}, #{phone}, #{status})
    </insert>

    <delete id="deleteUser" parameterType="Long">
        delete
        from tb_user
        where uid = #{value}
    </delete>

    <!--email、nickName可以设为NULL值-->
    <update id="updateUser" parameterType="com.yuehai.entity.UserEntity">
        update tb_user
        <set>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <choose>
                <when test="email != null and email != ''">
                    email = #{email},
                </when>
                <otherwise>
                    email = NULL,
                </otherwise>
            </choose>
            <choose>
                <when test="nickName != null and nickName != ''">
                    nick_name = #{nickName},
                </when>
                <otherwise>
                    nick_name = NULL,
                </otherwise>
            </choose>
        </set>
        where uid = #{id}
    </update>

    <select id="selectUserById" parameterType="Long" resultMap="UserResultMap">
        <include refid="User_Column_1"/>
        where uid = #{value}
    </select>

    <!--用户名登录需要返回权限字段-->
    <select id="selectUserByName" parameterType="String" resultMap="UserResultMap">
        <include refid="User_Column_2"/>
        where u.user_name = #{value}
        and u.uid=u_r.user_id
        and u_r.role_code=r.role_code
    </select>

    <!--手机号登录需要返回权限字段-->
    <select id="selectUserByPhone" parameterType="String" resultMap="UserResultMap">
        <include refid="User_Column_2"/>
        where u.phone = #{value}
        and u.uid=u_r.user_id
        and u_r.role_code=r.role_code
    </select>

    <select id="selectUserByEmail" parameterType="String" resultMap="UserResultMap">
        <include refid="User_Column_1"/>
        where email = #{value}
    </select>

    <select id="selectAllUser" resultMap="UserResultMap">
        <include refid="User_Column_2"/>
        where u.uid=u_r.user_id
        and u_r.role_code=r.role_code
    </select>

    <select id="selectAllVip" resultMap="UserResultMap">
        <include refid="User_Column_1"/>
        u,
        tb_role r,
        tb_user_role u_r
        where r.role_name = 'ROLE_VIP'
        and r.role_code = u_r.role_code
        and u.uid = u_r.user_id
    </select>

    <!--Role操作-->
    <resultMap id="RoleResultMap" type="com.yuehai.entity.RoleEntity">
        <result column="role_code" property="code" jdbcType="INTEGER"/>
        <result column="role_name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insertUserRole">
        insert into tb_user_role(user_id, role_code)
        values (#{userId,jdbcType=BIGINT}, #{roleCode,jdbcType=INTEGER})
    </insert>

    <delete id="deleteUserRoles" parameterType="Long">
        delete
        from tb_user_role
        where user_id = #{value}
    </delete>

    <delete id="deleteUserRole" parameterType="Long">
        delete
        from tb_user_role
        where user_id = #{userId,jdbcType=BIGINT}
          and role_code = #{roleCode,jdbcType=INTEGER}
    </delete>

    <select id="selectRoleByUserId" parameterType="Long" resultMap="RoleResultMap">
        select r.role_code,
               r.role_name
        from tb_role r,
             tb_user_role u_r
        where u_r.user_id = #{value}
          and r.role_code = u_r.role_code
    </select>

    <select id="selectRoleCodeByUserId" parameterType="Long" resultType="Integer">
        select role_code
        from tb_user_role
        where user_id = #{value}
    </select>
</mapper>